
*{
    box-sizing: border-box;
}

body{
    background-color: #EEE;
    font-family:'Lato',Helvetica,Arial;
    font-size:15px;
    display:flex;
    margin: 0;
    min-height: 100vw; /* Esse codigo vai fazer todos os conteudos gruda ate em baixo */
}

.models {
    display: none ;
}


/* Aparece so no mobile */
header{
    position: fixed;
    left: 0;
    right: 0;
    top: 0;
    height: 60px;
    display: none;
    background-color:#399ade;
    justify-content: flex-end;
    align-items: center;
}


.menu-openner{
    margin-right: 15px;
    font-size: 26px;
    background-color: #a9dcff;
    padding: 5px 20px;
    border-radius: 5px;
}
.menu-openner span {
    margin-right:10px;
}

.menu-closer {
    width:32px;
    height:32px;
    display:none;
    font-size: 30px;
}


/* Parte do desktop onde fica a area das pizzas  */
main{

    flex: 1 ;
    padding: 20px ;
}

h1{
    font-family:'Hepta Slab', Helvetica, Arial;
}

.pizza-area{
    display: grid;
    grid-template-columns: repeat(3, 1fr);
}

.pizza-item {
    text-align: center;
    max-width:250px;
    font-family:'Hepta Slab', Helvetica, Arial;
    margin:0 auto 50px auto;
}

.pizza-item a {
    display:flex;
    flex-direction: column;
    align-items:center;
    text-decoration: none;
}

.pizza-item--img {
    width:200px;
    height:200px;
    background-color:#EEE;
    border-radius:100px;
    box-shadow:0px 10px 50px rgba(0, 0, 0, 0.2);
}
.pizza-item--img img {
    width:100%;
    height:auto;
}
.pizza-item--add {
    width:50px;
    height:50px;
    line-height:50px;
    border-radius:25px;
    background-color:#388bc5;
    text-align:center;
    color:#FFF;
    font-size:22px;
    cursor:pointer;
    margin-top:-25px;
    transition:all ease .2s;
}
.pizza-item a:hover .pizza-item--add {
    background-color:#244c88;
}
.pizza-item--price {
    font-size:15px;
    color:#333;
    margin-top:5px;
}
.pizza-item--name {
    font-size:20px;
    font-weight: bold;
    color:#000;
    margin-top:5px;
}
.pizza-item--desc {
    font-size:13px;
    color:#555;
    margin-top:10px;
}


/* parte do quadrado que tem as informações de compra  que aparece no meio */

.pizzaWindowArea{
    position: fixed;
    left:0;
    top:0;
    bottom:0;
    right:0;
    display: none;
    background-color:rgba(255, 255, 255, 0.5);
    transition: all ease .5s;
    justify-content: center;
    align-items: center;
    overflow-y: auto;
}

.pizzaWindowBody{
    width: 900px;
    background-color:#FFF;
    border-radius: 10px;
    box-shadow:0px 0px 15px #999;
    display: flex;
    margin:20px 0px;
}

.pizzaBig {
    flex:1;
    display:flex;
    justify-content: center;
    align-items: center;
}

.pizzaBig--back {
    position:absolute;
    width:30px;
    height:30px;
    background-color:#000;
}

.pizzaBig img {
    height:400px;
    width:auto;
}

.pizzaInfo {
    flex:1;
    font-family:'Hepta Slab', Helvetica, Arial;
    padding-bottom:50px;
}

.pizzaInfo h1 {
    margin-top:50px;
}
.pizzaInfo .pizzaInfo--desc {
    font-size:15px;
    color:#999;
    margin-top:10px;
    font-family:'Lato',Helvetica,Arial;
}
.pizzaInfo--sector {
    color:#CCC;
    text-transform: uppercase;
    font-size:14px;
    margin-top:30px;
    margin-bottom:10px;
}

.pizzaInfo--sizes {
    display:inline-flex;
    border-radius:10px;
    overflow:hidden;
}

.pizzaInfo--size {
    padding:10px 15px;
    color:#000;
    background-color:#EEE;
    font-size:13px;
    font-weight: bold;
    cursor:pointer;
}
.pizzaInfo--size:hover {
    background-color:#CCC;
}
.pizzaInfo--size.selected {
    background-color:#399ade;
    color:#FFF;
}

.pizzaInfo--size.selected span {
    color:#D6D6D6;
}
.pizzaInfo--size span {
    font-size:12px;
    color:#999;
    font-weight: normal;
}

.pizzaInfo--price {
    display:flex;
    align-items:center;
}
.pizzaInfo--actualPrice {
    font-size:28px;
    margin-right:30px;
}
.pizzaInfo--qtarea {
    display:inline-flex;
    background-color:#EEE;
    border-radius:10px;
    height:30px;
}
.pizzaInfo--qtarea button {
    border:0;
    background-color:transparent;
    font-size:17px;
    outline:0;
    cursor:pointer;
    padding:0px 10px;
    color:#333;
}
.pizzaInfo--qt {
    line-height: 30px;
    font-size: 12px;
    font-weight: bold;
    padding: 0px 5px;
    color:#000;
}
.pizzaInfo--addButton {
    margin-top:30px;
    padding:20px 30px;
    border-radius:20px;
    background-color:#48d05f;
    color:#FFF;
    display:inline-block;
    cursor:pointer;
    margin-right:30px;
}
.pizzaInfo--addButton:hover {
    background-color:#32a345;
}
.pizzaInfo--cancelButton {
    display:inline-block;
    cursor:pointer;
}
.pizzaInfo--cancelMobileButton {
    display:none;
    height:40px;
    text-align:center;
    line-height: 40px;
    margin-bottom:30px;
}


/* parte do carrinho */
aside{

  background-color: #399ade;
   width: 0vw ; /* vAI FAZER desaparecer o carrinho  */
   font-family:'Hepta Slab', Helvetica, Arial;
   transition:all ease .2s;
   overflow-x: hidden;

}

aside.show{
    width:30vw;
}





/* parte da img da pizza dentro do carrinho */
.cart {
    margin-bottom:20px;
}
.cart--item {
    display:flex;
    align-items:center;
    margin:10px 0;
}

.cart--item img {
    width:40px;
    height:40px;
    margin-right:20px;
}

.cart--item-nome {
    flex:1;
}
.cart--item--qtarea {
    display:inline-flex;
    background-color:#EEE;
    border-radius:10px;
    height:30px;
}

.cart--item--qtarea button {
    border:0;
    background-color:transparent;
    font-size:17px;
    outline:0;
    cursor:pointer;
    padding:0px 10px;
    color:#333;
}

.cart--item--qt {
    line-height: 30px;
    font-size: 12px;
    font-weight: bold;
    padding: 0px 5px;
    color:#000;
}
.cart--totalitem {
    padding:15px 0;
    border-top:1px solid #79b9dd;
    color:#315970;
    display:flex;
    justify-content: space-between;
    font-size:15px;
}
.cart--totalitem span:first-child {
    font-weight: bold;
}
.cart--totalitem.big {
    font-size:20px;
    color:#000;
    font-weight: bold;
}
.cart--finalizar {
    padding:20px 30px;
    border-radius:20px;
    background-color:#48d05f;
    color:#FFF;
    cursor:pointer;
    text-align:center;
    margin-top:20px;
    border:2px solid #63f77c;
    transition: all ease .2s;
}
.cart--finalizar:hover {
    background-color:#35af4a;
}



@media (max-width:1000px) {
    .pizza-area {
        grid-template-columns: repeat(2, 1fr);
    }
}


@media (max-width : 840px){

    body{
        flex-direction: column;
    }
    .pizza-area {
        display:block;
    }
    .pizza-item {
        max-width:100%;
    }
    header {
        display:flex;
    }
    main {
        padding-top:60px;
    }

    aside {
        width:auto;
        position:fixed;
        left:100vw;
        right:0;
        top:0;
        bottom:0;
        transition: all ease .2s;
    }
    aside.show {
        width:auto;
    }
    .cart--area {
        width:100vw;
    }

    .menu-closer {
        display:block;
    }

    .pizzaWindowArea {
        justify-content:flex-start;
        align-items: flex-start;
    }

    .pizzaWindowBody {
        width:100vw;
        display:block;
        padding:20px;
        border-radius:0;
        box-shadow:none;
        margin:0;
    }

    .pizzaBig img {
        width: 75%;
        height: auto;
    }

    .pizzaInfo h1 {
        margin-top:20px;
    }

    .pizzaInfo--qtarea {
        height:60px;
    }
    .pizzaInfo--qtarea button {
        font-size:25px;
        padding:0px 25px;
    }
    .pizzaInfo--qt {
        line-height: 60px;
        font-size:20px;
    }
    .pizzaInfo--addButton {
        font-size:20px;
        display:block;
        text-align:center;
        margin:30px auto;
    }

    .pizzaInfo--cancelButton {
        display:none;
    }
    .pizzaInfo--cancelMobileButton {
        display:block;
    }
}

//dados 

let cart = [] //variaval que vai armazena o array 
let modalQt = 1 ; //variavel que armazenara a quantidade de pizza que tu vai querer 

let modalKey = 0 ; // //Variavel qeu vai armazena o key, para eu saber qual pizza que é na hora do que for por carrinho 



const c = (el) =>{
    return document.querySelector(el)
} 

const cs = (el)=>{
    return document.querySelectorAll(el)
}
 


//eventos 



//funcções

//1 coisa, que eu tenho que fazer é mapear 

pizzaJson.map((item,index)=>{

    let pizzaItem = document.querySelector(".models .pizza-item").cloneNode(true) ; //clono o item
    document.querySelector('.pizza-area').append(pizzaItem) ; //adiciono o item clonado a area que eu quero 

    //informações pra aparecer na tela 
    pizzaItem.querySelector('.pizza-item--img img').src = item.img ;
    pizzaItem.querySelector('.pizza-item--price').innerHTML = `R$${item.price.toFixed(2)}`
    pizzaItem.querySelector(".pizza-item--name").innerHTML = item.name ; 
    pizzaItem.querySelector('.pizza-item--desc').innerHTML = item.description

    //O index eu preciso bota em algun lugar na minha div de pizza, pois com ele eu identifico qual é a pizza
    pizzaItem.setAttribute('data-key', index)

    //eventos de quando eu clicar no produto : 
    pizzaItem.querySelector('a').addEventListener('click', (e)=>{

        e.preventDefault() ;

      

        //agora é abrir o quadro 
        document.querySelector('.pizzaWindowArea').style.opacity = 0 ;
        document.querySelector('.pizzaWindowArea').style.display = 'flex' ; 
        setTimeout(()=>{
            document.querySelector('.pizzaWindowArea').style.opacity = 1 ;
        },200)


        //faznedo a identificação de qual pizza eu vou ta clicando 
        //so que eu tenho que sair de a, pois eu quero é a .pizza-item
        //closest = significa, ache o elemneto mais proximo, ou seja, ele volta para tras  um elemento . 
        let key = e.target.closest(".pizza-item").getAttribute('data-key') ;

        c('.pizzaBig img').src = pizzaJson[key].img
        c(".pizzaInfo h1").innerHTML = pizzaJson[key].name;
        c(".pizzaInfo--desc").innerHTML = pizzaJson[key].description ;
        c(".pizzaInfo--actualPrice").innerHTML = `R$${pizzaJson[key].price.toFixed(2)}`


        //troca de tamanho das pizzas e informa o size 
        c(".pizzaInfo--size.selected").classList.remove('selected')
        cs('.pizzaInfo--size').forEach( (size,sizeIndex)=>{
           
            if(sizeIndex === 2){
                size.classList.add('selected')
            }

            size.querySelector("span").innerHTML = pizzaJson[key].sizes[sizeIndex]
        })


        
        //vai resetar a quantidade quando fechar o modal 
        modalQt = 1 ; 
        c('.pizzaInfo--qt').innerHTML = modalQt



        //Variavel qeu vai armazena o key, para eu saber qual pizza que é na hora do que for por carrinho 
        modalKey = key ; 


        
    

        
    })

  


    
    


   
})

// evento dos modals -------------------------------

//fecha o qadrado 

function closeModal(){

   

        document.querySelector('.pizzaWindowArea').style.opacity = 0 ;
        setTimeout(()=>{
            document.querySelector('.pizzaWindowArea').style.display = 'none';
        },500)
}

cs(".pizzaInfo--cancelButton , .pizzaInfo--cancelMobileButton").forEach((item) => {
     item.addEventListener("click", closeModal)
});



// evento de quanto clica no mais e menos, adiciona ou dimiunuir a quantidade de pizza

document.querySelector('.pizzaInfo--qtmais').addEventListener('click', ()=>{

    modalQt++ ;
    c('.pizzaInfo--qt').innerHTML = modalQt
    
})


document.querySelector('.pizzaInfo--qtmenos').addEventListener('click', ()=>{

   if(modalQt > 1){

    modalQt-- ;
    c('.pizzaInfo--qt').innerHTML = modalQt
    
   }

})


//troca de tamanho das pizzas e informa o size 
cs('.pizzaInfo--size').forEach( (size,sizeIndex)=>{

    size.addEventListener("click",()=>{
        c(".pizzaInfo--size.selected").classList.remove("selected");
        size.classList.add('selected');
        

    })

})


//eventos do carrinho -----------------------------------------------


c('.pizzaInfo--addButton').addEventListener("click", ()=>{

     // 3 informações obrigatorias para por no carrinho 

     //qual pizza ? = modalKey

     //qual o tamanho ? 

        let size = parseInt(c(".pizzaInfo--size.selected").getAttribute("data-key"))
        console.log(size)

     //Quantas pizzas  = modalQt


     //adiciona ao meu carrinho/array 

     //tenho que criar um identificador 

     let identificador =  pizzaJson[modalKey].id+"@"+size

     //verificar se eu ja tenho aquele item adicionado ao carrinho ; 
     let key = cart.findIndex((item)=>{
        return item.identificador == identificador;
     }) ;

     if(key > -1){

        //se eu achar o item no carrinho eu, so aumento a quantidade ;
        cart[key].qt += modalQt ; 

     }else{

        //se eu nao achar o item no carrinho, eu adiciono 
        cart.push({
            identificador,
            id : pizzaJson[modalKey].id ,
            size,
            qt : modalQt ,
         })
    

     }

     





     
    closeModal() ; 
    updateCart();
    
})


function updateCart(){

    //parte so do mobile, que vai fazer aparecer a quantidade de items para o carrinho 
    c(".menu-openner span").innerHTML = cart.length;

    //verirfica se tenho itens no carrinho 
    //se tiver eu abro o carrinho
    if(cart.length > 0){
       c("aside").classList.add("show") ;

       //limpa o carrinho 
       c('.cart').innerHTML = '' ;

       let subtotal = 0 ;
       let desconto = 0 ; 
       let total = 0 ; 

       //agora temos que fazer um looping no carrinho pois, eu vou peagr item a item, pra exibir na tela 

       for(let i in cart){
            //primeiro, é identificar qual é a pizza 
             //usamos o find para procurran no meu pizzaJson, e la dentro eu pego o id da pizza 
            let pizzaItem = pizzaJson.find((item)=>{
                 return item.id == cart[i].id
             })

              //clona o cart--item 

            let cartItem = c(".cart--item").cloneNode(true) ; 

             document.querySelector(".cart").append(cartItem) ; 

            let pizzaSizeName ;

            switch(cart[i].size){
                 case 0 : 
                    pizzaSizeName = 'P'
                 break ;
                 case 1 : 
                      pizzaSizeName = 'M'
                 break;
                case 2 : 
                      pizzaSizeName = 'G'
                break ;
            }

            let pizzaname = `${pizzaItem.name} ${pizzaSizeName}`

            cartItem.querySelector('.cart--item img').src = pizzaItem.img ; 
            cartItem.querySelector(".cart--item-nome").innerHTML = pizzaname ; 
            cartItem.querySelector('.cart--item--qt').innerHTML = modalQt ; 
            cartItem.querySelector(".cart--item--qt").innerHTML = cart[i].qt

            //adiciona as funções de almenta/diminuir  q quantidade 
            cartItem.querySelector(".cart--item-qtmais").addEventListener("click",()=>{

                cart[i].qt++ ; 
                updateCart() ; 
            }) ;

            cartItem.querySelector(".cart--item-qtmenos").addEventListener("click",()=>{

                if(cart[i].qt > 1){

                    cart[i].qt-- ; 
                   
                }else{
                    //removo o carrinho 
                    cart.splice(i,1)
                }

                updateCart() ; 
             
            })


            //calculando o subtotal 
            subtotal += pizzaItem.price * cart[i].qt


            
        }

        desconto = subtotal *0.1 ;
        total = subtotal - desconto ;

        c(".subtotal span:last-child").innerHTML = `R$${subtotal.toFixed(2)}`
        c(".desconto span:last-child").innerHTML = `R$${desconto.toFixed(2)}`
        c(".total span:last-child").innerHTML = `R$${total.toFixed(2)}`

       c(".cart--item").cloneNode(true) ;


    }else{

        c("aside").classList.remove("show") ;
        c("aside").style.left = "100vw" ;

    }

}


//abrir o carrinho no celula
document.querySelector(".menu-openner").addEventListener("click", ()=>{

   if(cart.length > 0){

        c("aside").style.left = "0" ;

   }
})


//fecha o carrinho no celula

c(".menu-closer").addEventListener("click",()=>{

    c("aside").style.left = "100vw"

})


  
